# trigger: none

# pool: Azure Pipelines

# variables:
#   working_dir_path: '$(System.DefaultWorkingDirectory)/Infra-QA'
#   wif: 'workload_identity_federation'


# steps:
# - task: TerraformInstaller@1
#   displayName: "Terraform install"
#   inputs:
#     terraformVersion: 'latest'

# - task: TerraformTask@5
#   displayName: "Terraform init"
#   inputs:
#     provider: 'azurerm'
#     command: 'init'
#     workingDirectory: '$(working_dir_path)'
#     backendServiceArm: '$(wif)'
#     backendAzureRmOverrideSubscriptionID: '9c521f44-ae8d-4736-9337-a8ab0038c6c7'
#     backendAzureRmResourceGroupName: 'rg-terraform'
#     backendAzureRmStorageAccountName: 'stgado'
#     backendAzureRmContainerName: 'mycnt'
#     backendAzureRmKey: 'dev.terraform.tfsatate'

# - task: TerraformTask@5
#   displayName: "Terraform validate"
#   inputs:
#     provider: 'azurerm'
#     command: 'validate'
#     workingDirectory: '$(working_dir_path)'

# - task: TerraformTask@5
#   displayName: "Terraform fmt"
#   inputs:
#     provider: 'azurerm'
#     command: 'custom'
#     workingDirectory: '$(working_dir_path)'
#     outputTo: 'console'
#     customCommand: 'fmt'
#     environmentServiceNameAzureRM: '$(wif)'

# - task: TerraformTask@5
#   displayName: "Terraform Plan"
#   inputs:
#     provider: 'azurerm'
#     command: 'plan'
#     workingDirectory: '$(working_dir_path)'
#     environmentServiceNameAzureRM: '$(wif)'

trigger:
- main
- feature/*

parameters:
- name: 'runApply'
  displayName: 'Terraform_Apply chalana hai ?'
  type: boolean
  default: false

jobs:

- job: 'Terraform_init_plan'
  displayName: 'Terraform init to plan'

  variables: 
    workDir: '$(System.DefaultWorkingDirectory)/Infra-QA'
    ServiceConn: '$(Workload_Identity_Federation)'

  pool: 'Terraform_Infra_Agent'

  steps: 
  - task: TerraformInstaller@1
    displayName: "Terraform Install"
    inputs:
      terraformVersion: 'latest'

  - task: TerraformTask@5
    displayName: 'Terraform init'
    inputs:
      provider: 'azurerm'
      command: 'init'
      workingDirectory: '$(workDir)'
      backendServiceArm: '$(ServiceConn)'
      backendAzureRmResourceGroupName: 'rg-terraform'
      backendAzureRmStorageAccountName: 'stgado'
      backendAzureRmContainerName: 'mycnt'
      backendAzureRmKey: 'dev.terraform.tfsatate'

  - task: TerraformTask@5
    displayName: 'Terraform fmt'
    inputs:
      provider: 'azurerm'
      command: 'custom'
      workingDirectory: '$(workDir)'
      outputTo: 'console'
      customCommand: 'fmt'
      environmentServiceNameAzureRM: '$(ServiceConn)'


  - task: TerraformTask@5
    displayName: 'Terraform validate'
    inputs:
      provider: 'azurerm'
      command: 'validate'
      workingDirectory: '$(workDir)'

  - task: TerraformTask@5
    displayName: 'Terraform plan'
    inputs:
      provider: 'azurerm'
      command: 'plan'
      workingDirectory: '$(workDir)'
      environmentServiceNameAzureRM: '$(ServiceConn)'

- job: 'manual_approval'
  displayName: 'Manual Approval dedo'
  dependsOn: Terraform_init_plan

  pool: server

  steps: 
  - task: ManualValidation@1
    inputs:
      notifyUsers: 'devopscollab101@gmail.com'
      approvers: 'devopscollab101@gmail.com'

- job: 'Terraform_init_apply'

  displayName: 'Terraform init and apply'
  dependsOn: 'manual_approval'
  condition: and(succeeded(), eq(${{parameters.runApply }}, true))

  variables: 
    workDir: '$(System.DefaultWorkingDirectory)/Infra-QA'
    ServiceConn: 'Workload_Identity_Federation'

  pool: 'Terraform_Infra_Agent'

  steps:

  - task: TerraformTask@5
    displayName: 'Terraform init'

    inputs:
      provider: 'azurerm'
      command: 'init'
      workingDirectory: '$(workDir)'
      backendServiceArm: '$(ServiceConn)'
      backendAzureRmResourceGroupName: 'rg-terraform'
      backendAzureRmStorageAccountName: 'stgado'
      backendAzureRmContainerName: 'mycnt'
      backendAzureRmKey: 'dev.terraform.tfsatate'
  
  - task: TerraformTask@5
    displayName: 'Terraform apply'

    inputs:
      provider: 'azurerm'
      command: 'apply'
      workingDirectory: '$(workDir)'
      backendServiceArm: '$(ServiceConn)'