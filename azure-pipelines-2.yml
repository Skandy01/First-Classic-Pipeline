trigger:
- main
- feature/*

pool: 'Terraform_Infra_Agent'

parameters:
- name: runApply
  displayName: 'Terraform apply chalana hai?'
  type: boolean
  default: false

- name: runScanning
  displayName: 'Code ki Scanning krwani hai?'  
  type: boolean
  default: false


variables:
  workDir: '$(System.DefaultWorkingDirectory)/Infra-QA'
  wif: 'Workload_Identity_Federation'

stages:

- stage: 'Build'
  displayName: 'Build CI'
  jobs:
  - job: 'Terraform_init_plan'
    displayName: 'Terraform init to plan'

    pool: 'Terraform_Infra_Agent'

    steps: 
    - task: TerraformInstaller@1
      displayName: "Terraform Install"
      inputs:
        terraformVersion: 'latest'

    - task: TerraformTask@5
      displayName: 'Terraform init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(workDir)'
        backendServiceArm: '$(wif)'
        backendAzureRmResourceGroupName: 'rg-terraform'
        backendAzureRmStorageAccountName: 'stgado'
        backendAzureRmContainerName: 'mycnt'
        backendAzureRmKey: 'dev.terraform.tfsatate'

    - task: TerraformTask@5
      displayName: 'Terraform fmt'
      inputs:
        provider: 'azurerm'
        command: 'custom'
        workingDirectory: '$(workDir)'
        outputTo: 'console'
        customCommand: 'fmt'
        environmentServiceNameAzureRM: '$(wif)'


    - task: TerraformTask@5
      displayName: 'Terraform validate'
      inputs:
        provider: 'azurerm'
        command: 'validate'
        workingDirectory: '$(workDir)'

    - task: TerraformTask@5
      displayName: 'Terraform plan'
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '$(workDir)'
        environmentServiceNameAzureRM: '$(wif)'


- stage: 'Scanning' 
  displayName: 'Scanning CI'

  jobs:
  - job: 'Scanning_Job'

    condition: eq(${{ parameters.runScanning }}, true)
    pool: 'Terraform_Infra_Agent'
    displayName: 'Scanning Tools Job'

    steps:
    - task: tfsec@1
      inputs:
        version: 'v1.26.0'
        dir: '$(workDir)'


- stage: Deploy
  displayName: Deploy CD with Manual Approval
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))  
  

  jobs:

  - job: manual_approval
    displayName: Manual Approval
    pool: server

    steps: 
    - task: ManualValidation@1
      inputs:
        notifyUsers: 'devopscollab101@gmail.com'
        approvers: 'devopscollab101@gmail.com'
        instructions: Plan check karlo Bhaiya...!

  - job: Terraform_Apply

    displayName: Terraform int and apply
    dependsOn: manual_approval
    condition: and(succeeded(), eq(${{ parameters.runApply }}, true))

    pool: Terraform_Infra_Agent

    steps:

    - task: TerraformTask@5
      displayName: Terraform init

      inputs:
        provider: azurerm
        command: init
        workingDirectory: $(workDir)
        backendServiceArm: $(wif)
        backendAzureRmResourceGroupName: rg-terraform
        backendAzureRmStorageAccountName: stgado
        backendAzureRmContainerName: mycnt
        backendAzureRmKey: dev.terraform.tfsatate
    
    - task: TerraformTask@5
      displayName: Terraform apply
      condition: 

      inputs:
        provider: azurerm
        command: apply
        workingDirectory: $(workDir)
        backendServiceArm: $(wif)
